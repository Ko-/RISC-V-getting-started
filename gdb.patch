diff --git a/gdb/configure b/gdb/configure
index 6a0664ab16..04c9f390f4 100755
--- a/gdb/configure
+++ b/gdb/configure
@@ -10312,7 +10312,7 @@ fi
 if test "${with_guile+set}" = set; then :
   withval=$with_guile;
 else
-  with_guile=auto
+  with_guile=no
 fi
 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether to use guile" >&5
diff --git a/gdb/python/python.c b/gdb/python/python.c
index be92f36b6e..670d2854f1 100644
--- a/gdb/python/python.c
+++ b/gdb/python/python.c
@@ -1518,6 +1518,19 @@ finalize_python (void *ignore)
 
   restore_active_ext_lang (previous_active);
 }
+
+#ifdef IS_PY3K
+/* This is called via the PyImport_AppendInittab mechanism called
+   during initialization, to make the built-in _gdb module known to
+   Python.  */
+PyMODINIT_FUNC
+init__gdb_module (void)
+{
+  return PyModule_Create (&python_GdbModuleDef);
+}
+#endif
+
+
 #endif
 
 /* Provide a prototype to silence -Wmissing-prototypes.  */
@@ -1569,7 +1582,9 @@ do_start_initialization ()
   /* Note that Py_SetProgramName expects the string it is passed to
      remain alive for the duration of the program's execution, so
      it is not freed after this call.  */
-  Py_SetProgramName (progname_copy);
+  Py_SetProgramName (progname_copy);+
+  /* Define _gdb as a built-in module.  */
+  PyImport_AppendInittab ("_gdb", init__gdb_module);
 #else
   Py_SetProgramName (progname);
 #endif
@@ -1579,9 +1594,7 @@ do_start_initialization ()
   PyEval_InitThreads ();
 
 #ifdef IS_PY3K
-  gdb_module = PyModule_Create (&python_GdbModuleDef);
-  /* Add _gdb module to the list of known built-in modules.  */
-  _PyImport_FixupBuiltin (gdb_module, "_gdb");
+  gdb_module = PyImport_ImportModule ("_gdb");
 #else
   gdb_module = Py_InitModule ("_gdb", python_GdbMethods);
 #endif
